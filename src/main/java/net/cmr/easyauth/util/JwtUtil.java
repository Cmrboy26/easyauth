package net.cmr.easyauth.util;

import java.util.Base64;
import java.util.Date;
import java.util.Map;

import javax.crypto.SecretKey;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties.Jwt;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import net.cmr.easyauth.entity.EALogin;

public class JwtUtil {
    
    /*@Value("{cmr.easyauth.enableAccessTokens:true}")
    public static boolean accessTokensEnabled;*/
    @Value("${cmr.easyauth.jwtSecretKey:AUTOGENERATE}")    
    private static String secretKeyConfiguration;
    private static SecretKey secretKey;
    @Value("${cmr.easyauth.refreshExpirationTime:36000}")
    private static int refreshExpirationTime;
    @Value("${cmr.easyauth.accessExpirationTime:3600}")
    private static int accessExpirationTime;

    public static final Logger logger = LoggerFactory.getLogger(JwtUtil.class);
    
    @Autowired
    public void setSecret() {
        if (secretKeyConfiguration.equals("AUTOGENERATE")) {
            logger.info("Autogenerating JWT secret key...");
            secretKey = Keys.secretKeyFor(SignatureAlgorithm.HS256);
            String base64String = Base64.getEncoder().encodeToString(secretKey.getEncoded());
            logger.info("AUTOGENERATED KEY: " + base64String);
        } else {
            byte[] keyBytes = Base64.getDecoder().decode(secretKeyConfiguration);
            secretKey = Keys.hmacShaKeyFor(keyBytes);
            logger.info("Successfully loaded JWT secret key.");
        }
    }

    public static String signJwt(EALogin login, boolean accessToken) {
        return signJwt(login, accessToken ? accessExpirationTime : refreshExpirationTime, accessToken);
    }

    /**
     * @param login login to generate the token for
     * @param expirationTime the time, in seconds, that the token will expire from the current moment
     * @param accessToken true if the generated token will be an access token, false for refresh
     * @return
     */
    public static String signJwt(EALogin login, int expirationTime, boolean accessToken) {
        return Jwts.builder()
            .signWith(secretKey)
            .setSubject(Boolean.toString(accessToken))
            .setExpiration(new Date(System.currentTimeMillis() + 1000 * expirationTime))
            .setId(login.getId().toString())
            .compact();
    }

    public static boolean isTokenType(String jwt, boolean accessToken) {
        return Boolean.valueOf(Jwts.parserBuilder()
            .setSigningKey(secretKey)
            .build()
            .parseClaimsJws(jwt)
            .getBody()
            .getSubject()
            .toString()) == accessToken;
    }

    public static long getId(String jwt) {
        return Long.valueOf(Jwts.parserBuilder()
            .setSigningKey(secretKey)
            .build()
            .parseClaimsJws(jwt)
            .getBody()
            .getId());
    }

}
